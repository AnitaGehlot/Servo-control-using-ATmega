
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000028  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000019f  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000104  00000000  00000000  0000030b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000019a  00000000  00000000  0000040f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ff  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000080  00000000  00000000  000006db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000075b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_pwm>:
// Fast PWM, Non-Inverting, N = 64;
//FAST PWM with ICR1 as TOP
//PWM frequency 50Hz
void init_pwm()
{
TCCR1A|= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	82 6a       	ori	r24, 0xA2	; 162
  70:	8f bd       	out	0x2f, r24	; 47
 
TCCR1B|= (1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	8b 61       	ori	r24, 0x1B	; 27
  76:	8e bd       	out	0x2e, r24	; 46

ICR1 = F_CPU /(Prescaler * PWM_Frequency) -1;
  78:	87 e3       	ldi	r24, 0x37	; 55
  7a:	91 e0       	ldi	r25, 0x01	; 1
  7c:	97 bd       	out	0x27, r25	; 39
  7e:	86 bd       	out	0x26, r24	; 38

}
  80:	08 95       	ret

00000082 <main>:
 
unsigned short angle_20_degree = 40;
unsigned short angle_0_degree = 0;

 // Set PD5 and PD4 as output
 DDRD = (1<<4)|(1 << 5);
  82:	80 e3       	ldi	r24, 0x30	; 48
  84:	81 bb       	out	0x11, r24	; 17
// Fast PWM, Non-Inverting, N = 64;
//FAST PWM with ICR1 as TOP
//PWM frequency 50Hz
void init_pwm()
{
TCCR1A|= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
  86:	8f b5       	in	r24, 0x2f	; 47
  88:	82 6a       	ori	r24, 0xA2	; 162
  8a:	8f bd       	out	0x2f, r24	; 47
 
TCCR1B|= (1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);
  8c:	8e b5       	in	r24, 0x2e	; 46
  8e:	8b 61       	ori	r24, 0x1B	; 27
  90:	8e bd       	out	0x2e, r24	; 46

ICR1 = F_CPU /(Prescaler * PWM_Frequency) -1;
  92:	87 e3       	ldi	r24, 0x37	; 55
  94:	91 e0       	ldi	r25, 0x01	; 1
  96:	97 bd       	out	0x27, r25	; 39
  98:	86 bd       	out	0x26, r24	; 38
 init_pwm();

 while(1)
 {

  OCR1A = time_count * Min_value_PWM + (angle_20_degree * time_count*(Max_value_PWM - Min_value_PWM))/180;
  9a:	62 e1       	ldi	r22, 0x12	; 18
  9c:	70 e0       	ldi	r23, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	29 e1       	ldi	r18, 0x19	; 25
  a0:	30 e0       	ldi	r19, 0x00	; 0
 _delay_ms(1000);

 OCR1A = time_count * Min_value_PWM + (angle_0_degree * time_count*(Max_value_PWM - Min_value_PWM))/180;
  a2:	4f e0       	ldi	r20, 0x0F	; 15
  a4:	50 e0       	ldi	r21, 0x00	; 0
 init_pwm();

 while(1)
 {

  OCR1A = time_count * Min_value_PWM + (angle_20_degree * time_count*(Max_value_PWM - Min_value_PWM))/180;
  a6:	7b bd       	out	0x2b, r23	; 43
  a8:	6a bd       	out	0x2a, r22	; 42
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	97 e2       	ldi	r25, 0x27	; 39
  ae:	f9 01       	movw	r30, r18
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b6:	d9 f7       	brne	.-10     	; 0xae <main+0x2c>
 _delay_ms(1000);

 OCR1A = time_count * Min_value_PWM + (angle_0_degree * time_count*(Max_value_PWM - Min_value_PWM))/180;
  b8:	5b bd       	out	0x2b, r21	; 43
  ba:	4a bd       	out	0x2a, r20	; 42
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	97 e2       	ldi	r25, 0x27	; 39
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c8:	d9 f7       	brne	.-10     	; 0xc0 <main+0x3e>
  ca:	ed cf       	rjmp	.-38     	; 0xa6 <main+0x24>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
